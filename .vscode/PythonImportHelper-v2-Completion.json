[
    {
        "label": "pytest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytest",
        "description": "pytest",
        "detail": "pytest",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "Keys",
        "importPath": "selenium.webdriver.common.keys",
        "description": "selenium.webdriver.common.keys",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.keys",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "mptt.fields",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "mptt.fields",
        "description": "mptt.fields",
        "detail": "mptt.fields",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "ecommerce.inventory",
        "description": "ecommerce.inventory",
        "isExtraImport": true,
        "detail": "ecommerce.inventory",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "ecommerce.inventory",
        "description": "ecommerce.inventory",
        "isExtraImport": true,
        "detail": "ecommerce.inventory",
        "documentation": {}
    },
    {
        "label": "Category",
        "importPath": "ecommerce.inventory.models",
        "description": "ecommerce.inventory.models",
        "isExtraImport": true,
        "detail": "ecommerce.inventory.models",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "MPTTModel",
        "importPath": "mptt.models",
        "description": "mptt.models",
        "isExtraImport": true,
        "detail": "mptt.models",
        "documentation": {}
    },
    {
        "label": "TreeForeignKey",
        "importPath": "mptt.models",
        "description": "mptt.models",
        "isExtraImport": true,
        "detail": "mptt.models",
        "documentation": {}
    },
    {
        "label": "TreeManyToManyField",
        "importPath": "mptt.models",
        "description": "mptt.models",
        "isExtraImport": true,
        "detail": "mptt.models",
        "documentation": {}
    },
    {
        "label": "Text",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "factory",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "factory",
        "description": "factory",
        "detail": "factory",
        "documentation": {}
    },
    {
        "label": "Faker",
        "importPath": "faker",
        "description": "faker",
        "isExtraImport": true,
        "detail": "faker",
        "documentation": {}
    },
    {
        "label": "register",
        "importPath": "pytest_factoryboy",
        "description": "pytest_factoryboy",
        "isExtraImport": true,
        "detail": "pytest_factoryboy",
        "documentation": {}
    },
    {
        "label": "call_command",
        "importPath": "django.core.management",
        "description": "django.core.management",
        "isExtraImport": true,
        "detail": "django.core.management",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "Options",
        "importPath": "selenium.webdriver.chrome.options",
        "description": "selenium.webdriver.chrome.options",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.options",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "warnings",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "warnings",
        "description": "warnings",
        "detail": "warnings",
        "documentation": {}
    },
    {
        "label": "management",
        "importPath": "django.core",
        "description": "django.core",
        "isExtraImport": true,
        "detail": "django.core",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "test_dashboard_admin_login",
        "kind": 2,
        "importPath": "ecommerce.dashboard.tests.test_selenium_dashboard",
        "description": "ecommerce.dashboard.tests.test_selenium_dashboard",
        "peekOfCode": "def test_dashboard_admin_login(live_server, db_fixture_setup, chrome_browser_instance):\n    browser = chrome_browser_instance\n    browser.get((\"%s%s\" % (live_server.url, \"/admin/login/\")))\n    user_name = browser.find_element(By.NAME, \"username\")\n    user_password = browser.find_element(By.NAME, \"password\")\n    submit = browser.find_element(By.XPATH, '//input[@value=\"Log in\"]')\n    user_name.send_keys(\"admin\")\n    user_password.send_keys(\"password\")\n    submit.send_keys(Keys.RETURN)\n    assert \"Site administration\" in browser.page_source",
        "detail": "ecommerce.dashboard.tests.test_selenium_dashboard",
        "documentation": {}
    },
    {
        "label": "DashboardConfig",
        "kind": 6,
        "importPath": "ecommerce.dashboard.apps",
        "description": "ecommerce.dashboard.apps",
        "peekOfCode": "class DashboardConfig(AppConfig):\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"ecommerce.dashboard\"",
        "detail": "ecommerce.dashboard.apps",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "ecommerce.inventory.migrations.0001_initial",
        "description": "ecommerce.inventory.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Brand',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(help_text='format: required, unique, max-255', max_length=255, unique=True, verbose_name='brand name')),",
        "detail": "ecommerce.inventory.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "test_inventory_category_dbfixture",
        "kind": 2,
        "importPath": "ecommerce.inventory.tests.test_db_fixtures",
        "description": "ecommerce.inventory.tests.test_db_fixtures",
        "peekOfCode": "def test_inventory_category_dbfixture(db, db_fixture_setup, id, name, slug, is_active):\n    result = models.Category.objects.get(id=id)\n    assert result.name == name\n    assert result.slug == slug\n    assert result.is_active == is_active\n@pytest.mark.parametrize(\n    \"name, slug, is_active\",\n    [\n        (\"fashion\", \"fashion\", 1),\n        (\"trainers\", \"trainers\", 1),",
        "detail": "ecommerce.inventory.tests.test_db_fixtures",
        "documentation": {}
    },
    {
        "label": "test_inventory_category_insert_data",
        "kind": 2,
        "importPath": "ecommerce.inventory.tests.test_db_fixtures",
        "description": "ecommerce.inventory.tests.test_db_fixtures",
        "peekOfCode": "def test_inventory_category_insert_data(db, category_factory, name, slug, is_active):\n    result = category_factory.create(name=name, slug=slug, is_active=is_active)\n    assert result.name == name\n    assert result.slug == slug\n    assert result.is_active == is_active",
        "detail": "ecommerce.inventory.tests.test_db_fixtures",
        "documentation": {}
    },
    {
        "label": "InventoryConfig",
        "kind": 6,
        "importPath": "ecommerce.inventory.apps",
        "description": "ecommerce.inventory.apps",
        "peekOfCode": "class InventoryConfig(AppConfig):\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"ecommerce.inventory\"",
        "detail": "ecommerce.inventory.apps",
        "documentation": {}
    },
    {
        "label": "Category",
        "kind": 6,
        "importPath": "ecommerce.inventory.models",
        "description": "ecommerce.inventory.models",
        "peekOfCode": "class Category(MPTTModel):\n    \"\"\"\n    Inventory Category table implemented with MPTT\n    \"\"\"\n    name = models.CharField(\n        max_length=100,\n        null=False,\n        unique=False,\n        blank=False,\n        verbose_name=_(\"category name\"),",
        "detail": "ecommerce.inventory.models",
        "documentation": {}
    },
    {
        "label": "Product",
        "kind": 6,
        "importPath": "ecommerce.inventory.models",
        "description": "ecommerce.inventory.models",
        "peekOfCode": "class Product(models.Model):\n    \"\"\"\n    Product details table\n    \"\"\"\n    web_id = models.CharField(\n        max_length=50,\n        unique=True,\n        null=False,\n        blank=False,\n        verbose_name=_(\"product website ID\"),",
        "detail": "ecommerce.inventory.models",
        "documentation": {}
    },
    {
        "label": "ProductType",
        "kind": 6,
        "importPath": "ecommerce.inventory.models",
        "description": "ecommerce.inventory.models",
        "peekOfCode": "class ProductType(models.Model):\n    \"\"\"\n    Product type table\n    \"\"\"\n    name = models.CharField(\n        max_length=255,\n        unique=True,\n        null=False,\n        blank=False,\n        verbose_name=_(\"type of product\"),",
        "detail": "ecommerce.inventory.models",
        "documentation": {}
    },
    {
        "label": "Brand",
        "kind": 6,
        "importPath": "ecommerce.inventory.models",
        "description": "ecommerce.inventory.models",
        "peekOfCode": "class Brand(models.Model):\n    \"\"\"\n    Product brand table\n    \"\"\"\n    name = models.CharField(\n        max_length=255,\n        unique=True,\n        null=False,\n        blank=False,\n        verbose_name=_(\"brand name\"),",
        "detail": "ecommerce.inventory.models",
        "documentation": {}
    },
    {
        "label": "ProductAttribute",
        "kind": 6,
        "importPath": "ecommerce.inventory.models",
        "description": "ecommerce.inventory.models",
        "peekOfCode": "class ProductAttribute(models.Model):\n    \"\"\"\n    Product attribute table\n    \"\"\"\n    name = models.CharField(\n        max_length=255,\n        unique=True,\n        null=False,\n        blank=False,\n        verbose_name=_(\"product attribute name\"),",
        "detail": "ecommerce.inventory.models",
        "documentation": {}
    },
    {
        "label": "ProductAttributeValue",
        "kind": 6,
        "importPath": "ecommerce.inventory.models",
        "description": "ecommerce.inventory.models",
        "peekOfCode": "class ProductAttributeValue(models.Model):\n    \"\"\"\n    Product attribute value table\n    \"\"\"\n    product_attribute = models.ForeignKey(\n        ProductAttribute,\n        related_name=\"product_attribute\",\n        on_delete=models.PROTECT,\n    )\n    attribute_value = models.CharField(",
        "detail": "ecommerce.inventory.models",
        "documentation": {}
    },
    {
        "label": "ProductInventory",
        "kind": 6,
        "importPath": "ecommerce.inventory.models",
        "description": "ecommerce.inventory.models",
        "peekOfCode": "class ProductInventory(models.Model):\n    \"\"\"\n    Product inventory table\n    \"\"\"\n    sku = models.CharField(\n        max_length=20,\n        unique=True,\n        null=False,\n        blank=False,\n        verbose_name=_(\"stock keeping unit\"),",
        "detail": "ecommerce.inventory.models",
        "documentation": {}
    },
    {
        "label": "Media",
        "kind": 6,
        "importPath": "ecommerce.inventory.models",
        "description": "ecommerce.inventory.models",
        "peekOfCode": "class Media(models.Model):\n    \"\"\"\n    The product image table.\n    \"\"\"\n    product_inventory = models.ForeignKey(\n        ProductInventory,\n        on_delete=models.PROTECT,\n        related_name=\"media_product_inventory\",\n    )\n    image = models.ImageField(",
        "detail": "ecommerce.inventory.models",
        "documentation": {}
    },
    {
        "label": "Stock",
        "kind": 6,
        "importPath": "ecommerce.inventory.models",
        "description": "ecommerce.inventory.models",
        "peekOfCode": "class Stock(models.Model):\n    product_inventory = models.OneToOneField(\n        ProductInventory,\n        related_name=\"product_inventory\",\n        on_delete=models.PROTECT,\n    )\n    last_checked = models.DateTimeField(\n        unique=False,\n        null=True,\n        blank=True,",
        "detail": "ecommerce.inventory.models",
        "documentation": {}
    },
    {
        "label": "ProductAttributeValues",
        "kind": 6,
        "importPath": "ecommerce.inventory.models",
        "description": "ecommerce.inventory.models",
        "peekOfCode": "class ProductAttributeValues(models.Model):\n    \"\"\"\n    Product attribute values link table\n    \"\"\"\n    attributevalues = models.ForeignKey(\n        \"ProductAttributeValue\",\n        related_name=\"attributevaluess\",\n        on_delete=models.PROTECT,\n    )\n    productinventory = models.ForeignKey(",
        "detail": "ecommerce.inventory.models",
        "documentation": {}
    },
    {
        "label": "CategoryFactory",
        "kind": 6,
        "importPath": "ecommerce.tests.factories",
        "description": "ecommerce.tests.factories",
        "peekOfCode": "class CategoryFactory(factory.django.DjangoModelFactory):\n    class Meta:\n        model = models.Category\n    name = fake.lexify(text=\"cat_name_????\")\n    slug = fake.lexify(text=\"cat_slug_????\")\nregister(CategoryFactory)",
        "detail": "ecommerce.tests.factories",
        "documentation": {}
    },
    {
        "label": "fake",
        "kind": 5,
        "importPath": "ecommerce.tests.factories",
        "description": "ecommerce.tests.factories",
        "peekOfCode": "fake = Faker()\nfrom ecommerce.inventory import models\nclass CategoryFactory(factory.django.DjangoModelFactory):\n    class Meta:\n        model = models.Category\n    name = fake.lexify(text=\"cat_name_????\")\n    slug = fake.lexify(text=\"cat_slug_????\")\nregister(CategoryFactory)",
        "detail": "ecommerce.tests.factories",
        "documentation": {}
    },
    {
        "label": "create_admin_user",
        "kind": 2,
        "importPath": "ecommerce.tests.fixtures",
        "description": "ecommerce.tests.fixtures",
        "peekOfCode": "def create_admin_user(django_user_model):\n    \"\"\"\n    Return admin user for tests\n    \"\"\"\n    return django_user_model.objects.create_superuser(\n        \"admin\", \"a@a.com\", \"password\"\n    )\n@pytest.fixture(scope=\"session\")\ndef db_fixture_setup(django_db_setup, django_db_blocker):\n    \"\"\"",
        "detail": "ecommerce.tests.fixtures",
        "documentation": {}
    },
    {
        "label": "db_fixture_setup",
        "kind": 2,
        "importPath": "ecommerce.tests.fixtures",
        "description": "ecommerce.tests.fixtures",
        "peekOfCode": "def db_fixture_setup(django_db_setup, django_db_blocker):\n    \"\"\"\n    Load database fixtures for tests\n    \"\"\"\n    with django_db_blocker.unblock():\n        call_command(\"loaddata\", \"db_admin_fixture.json\")\n        call_command(\"loaddata\", \"db_category_fixture.json\")",
        "detail": "ecommerce.tests.fixtures",
        "documentation": {}
    },
    {
        "label": "chrome_browser_instance",
        "kind": 2,
        "importPath": "ecommerce.tests.selenium",
        "description": "ecommerce.tests.selenium",
        "peekOfCode": "def chrome_browser_instance(request):\n    \"\"\"\n    Provide a selenium webdriver instance\n    \"\"\"\n    options = Options()\n    options.headless = False\n    browser = webdriver.Chrome(options=options)\n    yield browser\n    browser.close()",
        "detail": "ecommerce.tests.selenium",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "ecommerce.asgi",
        "description": "ecommerce.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "ecommerce.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "ecommerce.settings",
        "description": "ecommerce.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = (\n    \"django-insecure-_83&(d$0ypq!^%5$=bys*@(k9j-x2f4&x0m@$ab3w2+#&27mss\"\n)\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []",
        "detail": "ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "ecommerce.settings",
        "description": "ecommerce.settings",
        "peekOfCode": "SECRET_KEY = (\n    \"django-insecure-_83&(d$0ypq!^%5$=bys*@(k9j-x2f4&x0m@$ab3w2+#&27mss\"\n)\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",",
        "detail": "ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "ecommerce.settings",
        "description": "ecommerce.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",",
        "detail": "ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "ecommerce.settings",
        "description": "ecommerce.settings",
        "peekOfCode": "ALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",\n    # local applications",
        "detail": "ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "ecommerce.settings",
        "description": "ecommerce.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",\n    # local applications\n    \"ecommerce.dashboard\",\n    \"ecommerce.inventory\",",
        "detail": "ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "ecommerce.settings",
        "description": "ecommerce.settings",
        "peekOfCode": "MIDDLEWARE = [\n    \"django.middleware.security.SecurityMiddleware\",\n    \"django.contrib.sessions.middleware.SessionMiddleware\",\n    \"django.middleware.common.CommonMiddleware\",\n    \"django.middleware.csrf.CsrfViewMiddleware\",\n    \"django.contrib.auth.middleware.AuthenticationMiddleware\",\n    \"django.contrib.messages.middleware.MessageMiddleware\",\n    \"django.middleware.clickjacking.XFrameOptionsMiddleware\",\n]\nROOT_URLCONF = \"ecommerce.urls\"",
        "detail": "ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "ecommerce.settings",
        "description": "ecommerce.settings",
        "peekOfCode": "ROOT_URLCONF = \"ecommerce.urls\"\nTEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.template.context_processors.debug\",\n                \"django.template.context_processors.request\",",
        "detail": "ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "ecommerce.settings",
        "description": "ecommerce.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.template.context_processors.debug\",\n                \"django.template.context_processors.request\",\n                \"django.contrib.auth.context_processors.auth\",",
        "detail": "ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "ecommerce.settings",
        "description": "ecommerce.settings",
        "peekOfCode": "WSGI_APPLICATION = \"ecommerce.wsgi.application\"\n# Database\n# https://docs.djangoproject.com/en/3.2/ref/settings/#databases\nDATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.sqlite3\",\n        \"NAME\": BASE_DIR / \"db.sqlite3\",\n    }\n}\n# Password validation",
        "detail": "ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "ecommerce.settings",
        "description": "ecommerce.settings",
        "peekOfCode": "DATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.sqlite3\",\n        \"NAME\": BASE_DIR / \"db.sqlite3\",\n    }\n}\n# Password validation\n# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {",
        "detail": "ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "ecommerce.settings",
        "description": "ecommerce.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.UserAttributeSimilarityValidator\",\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.MinimumLengthValidator\",\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.CommonPasswordValidator\",\n    },",
        "detail": "ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "ecommerce.settings",
        "description": "ecommerce.settings",
        "peekOfCode": "LANGUAGE_CODE = \"en-us\"\nTIME_ZONE = \"UTC\"\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\nSTATIC_URL = \"/static/\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field",
        "detail": "ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "ecommerce.settings",
        "description": "ecommerce.settings",
        "peekOfCode": "TIME_ZONE = \"UTC\"\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\nSTATIC_URL = \"/static/\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"",
        "detail": "ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "ecommerce.settings",
        "description": "ecommerce.settings",
        "peekOfCode": "USE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\nSTATIC_URL = \"/static/\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"",
        "detail": "ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "USE_L10N",
        "kind": 5,
        "importPath": "ecommerce.settings",
        "description": "ecommerce.settings",
        "peekOfCode": "USE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\nSTATIC_URL = \"/static/\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"",
        "detail": "ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "ecommerce.settings",
        "description": "ecommerce.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\nSTATIC_URL = \"/static/\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"",
        "detail": "ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "ecommerce.settings",
        "description": "ecommerce.settings",
        "peekOfCode": "STATIC_URL = \"/static/\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"",
        "detail": "ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "ecommerce.settings",
        "description": "ecommerce.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"",
        "detail": "ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "ecommerce.urls",
        "description": "ecommerce.urls",
        "peekOfCode": "urlpatterns = [\n    path(\"admin/\", admin.site.urls),\n]",
        "detail": "ecommerce.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "ecommerce.wsgi",
        "description": "ecommerce.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "ecommerce.wsgi",
        "documentation": {}
    },
    {
        "label": "pytest_plugins",
        "kind": 5,
        "importPath": "conftest",
        "description": "conftest",
        "peekOfCode": "pytest_plugins = [\n    \"ecommerce.tests.fixtures\",\n    \"ecommerce.tests.selenium\",\n    \"ecommerce.tests.factories\",\n]",
        "detail": "conftest",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"ecommerce.settings\")\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "manage",
        "documentation": {}
    }
]